[RandomForestRegressor: fit]
| inputlookup server_power.csv 
| fit AutoPrediction "total-disk-utilization" from "total-disk-accesses" "total-disk-blocks" test_split_ratio=0.3 into "example_disk_utilization"

[RandomForestRegressor: summary]
| summary example_disk_utilization

[RandomForestClassifier: fit]
| inputlookup firewall_traffic.csv 
| head 50000 
| fit AutoPrediction "has_known_vulnerability" from "bytes_received" "packets_received" "packets_sent" "bytes_sent" "used_by_malware" test_split_ratio=0.3 into "example_firewall_traffic"

[RandomForestClassifier: summary]
| summary example_firewall_traffic

[DensityFunction: fit]
| inputlookup supermarket.csv 
| fit DensityFunction "quantity" by "shop_id" dist=auto threshold=0.01 show_density=true show_options="feature_variables,split_by,params" into "example_soda_supermarket"

[DensityFunction: summary]
| summary example_soda_supermarket

[StateSpaceForecast: fit]
| inputlookup applogonscount.csv 
| timechart span=1d max(logons) as logons 
| eval "_original__time"='_time' 
| eval "_time"=strftime('_time', "%Y-%m-%d") 
| eval "_time"=strptime('_time', "%Y-%m-%d") 
| append 
    [ inputlookup "specialdays" 
    | eval "_time"=strptime('Date', "%Y-%m-%d") 
    | fields "_time" "holidayvalue"] 
| selfjoin keepsingle=true "_time" 
| eval "_time"=if(isnull('_original__time'), '_time', '_original__time') 
| fields - "_original__time" 
| makecontinuous "_time" 
| fit StateSpaceForecast "logons" holdback=0 forecast_k=30 conf_interval=70 period=7 specialdays=holidayvalue output_metadata=true into "example_sf_app_logons"

[StateSpaceForecast: summary]
| summary example_sf_app_logons

[KMeans: fit]
| inputlookup mortgage_loan_ny.csv 
| eval Adjustable_rate_loans(%)=if('Adjustable_rate_loans(%)'=="NA" OR 'Adjustable_rate_loans(%)'=="NA*", 0, 'Adjustable_rate_loans(%)') 
| convert auto(*) as * 
| fit PCA "Adjustable_rate_loans(%)" "Contract_interest_rate(%)" "Effective_interest_rate(%)" "Initial_fees_and_charges(%)" "Loan_to_price_ratio(%)" "Purchase_price" "Term_to_maturity" "Year" k=3 into "example_mortgage_loans_PCA_1" 
| fit KMeans "PC_1" "PC_2" "PC_3" k=3 into "example_mortgage_loans"

[KMeans: summary]
| summary example_mortgage_loans

[apply]
| inputlookup disk_failures.csv 
| apply example_soda_disk_failure
| search "IsOutlier(SMART_3_Raw)">0
| sort ProbabilityDensity(SMART_3_Raw)
